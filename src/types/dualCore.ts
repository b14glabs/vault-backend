/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CoreVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "claimReward"
      | "dualCore"
      | "exchangeCore"
      | "exchangeDualCore"
      | "initialize"
      | "operator"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "reInvest"
      | "reInvestIndex"
      | "renounceOwnership"
      | "rewardFee"
      | "setDualCore"
      | "setOperator"
      | "setRewardFee"
      | "setStrategy"
      | "setWithdrawFee"
      | "stake"
      | "strategy"
      | "totalStaked"
      | "totalUnbondAmount"
      | "transferOwnership"
      | "unbond"
      | "unbondRecords"
      | "unpause"
      | "withdraw"
      | "withdrawDirect"
      | "withdrawFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimReward"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "ReInvest"
      | "Stake"
      | "Unbond"
      | "Unpaused"
      | "UpdateStrategy"
      | "Withdraw"
      | "WithdrawDirect"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dualCore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exchangeCore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeDualCore",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "operator", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reInvest",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reInvestIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDualCore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUnbondAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unbond",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "unbondRecords",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawDirect",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dualCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangeCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeDualCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "operator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reInvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reInvestIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDualCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUnbondAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unbond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unbondRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
}

export namespace ClaimRewardEvent {
  export type InputTuple = [reward: BigNumberish, fee: BigNumberish];
  export type OutputTuple = [reward: bigint, fee: bigint];
  export interface OutputObject {
    reward: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReInvestEvent {
  export type InputTuple = [data: BytesLike];
  export type OutputTuple = [data: string];
  export interface OutputObject {
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    user: AddressLike,
    coreAmount: BigNumberish,
    dualCoreAmount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    coreAmount: bigint,
    dualCoreAmount: bigint
  ];
  export interface OutputObject {
    user: string;
    coreAmount: bigint;
    dualCoreAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnbondEvent {
  export type InputTuple = [
    user: AddressLike,
    coreAmount: BigNumberish,
    dualCoreAmount: BigNumberish,
    reInvestIndex: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    coreAmount: bigint,
    dualCoreAmount: bigint,
    reInvestIndex: bigint
  ];
  export interface OutputObject {
    user: string;
    coreAmount: bigint;
    dualCoreAmount: bigint;
    reInvestIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateStrategyEvent {
  export type InputTuple = [strategy: AddressLike];
  export type OutputTuple = [strategy: string];
  export interface OutputObject {
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawDirectEvent {
  export type InputTuple = [
    user: AddressLike,
    dualCoreAmount: BigNumberish,
    coreAmount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    dualCoreAmount: bigint,
    coreAmount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    user: string;
    dualCoreAmount: bigint;
    coreAmount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CoreVault extends BaseContract {
  connect(runner?: ContractRunner | null): CoreVault;
  waitForDeployment(): Promise<this>;

  interface: CoreVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  claimReward: TypedContractMethod<[], [bigint], "nonpayable">;

  dualCore: TypedContractMethod<[], [string], "view">;

  exchangeCore: TypedContractMethod<
    [_dualCore: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  exchangeDualCore: TypedContractMethod<
    [core: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _owner: AddressLike,
      _operator: AddressLike,
      _withdrawFee: BigNumberish,
      _rewardFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  operator: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  reInvest: TypedContractMethod<
    [data: BytesLike, _totalUnbondAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  reInvestIndex: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardFee: TypedContractMethod<[], [bigint], "view">;

  setDualCore: TypedContractMethod<
    [_dualCore: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [_operator: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setStrategy: TypedContractMethod<
    [_strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[], [void], "payable">;

  strategy: TypedContractMethod<[], [string], "view">;

  totalStaked: TypedContractMethod<[], [bigint], "nonpayable">;

  totalUnbondAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unbond: TypedContractMethod<
    [dualCoreAmount: BigNumberish, claim: boolean],
    [void],
    "payable"
  >;

  unbondRecords: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        coreAmount: bigint;
        dualCoreAmount: bigint;
        reInvestIndex: bigint;
      }
    ],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "payable">;

  withdrawDirect: TypedContractMethod<
    [dualCoreAmount: BigNumberish, claim: boolean],
    [void],
    "payable"
  >;

  withdrawFee: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "dualCore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exchangeCore"
  ): TypedContractMethod<[_dualCore: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "exchangeDualCore"
  ): TypedContractMethod<[core: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _operator: AddressLike,
      _withdrawFee: BigNumberish,
      _rewardFee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "operator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reInvest"
  ): TypedContractMethod<
    [data: BytesLike, _totalUnbondAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reInvestIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setDualCore"
  ): TypedContractMethod<[_dualCore: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<[_operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategy"
  ): TypedContractMethod<[_strategy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStaked"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "totalUnbondAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unbond"
  ): TypedContractMethod<
    [dualCoreAmount: BigNumberish, claim: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unbondRecords"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        coreAmount: bigint;
        dualCoreAmount: bigint;
        reInvestIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "withdrawDirect"
  ): TypedContractMethod<
    [dualCoreAmount: BigNumberish, claim: boolean],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "ClaimReward"
  ): TypedContractEvent<
    ClaimRewardEvent.InputTuple,
    ClaimRewardEvent.OutputTuple,
    ClaimRewardEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReInvest"
  ): TypedContractEvent<
    ReInvestEvent.InputTuple,
    ReInvestEvent.OutputTuple,
    ReInvestEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Unbond"
  ): TypedContractEvent<
    UnbondEvent.InputTuple,
    UnbondEvent.OutputTuple,
    UnbondEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateStrategy"
  ): TypedContractEvent<
    UpdateStrategyEvent.InputTuple,
    UpdateStrategyEvent.OutputTuple,
    UpdateStrategyEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawDirect"
  ): TypedContractEvent<
    WithdrawDirectEvent.InputTuple,
    WithdrawDirectEvent.OutputTuple,
    WithdrawDirectEvent.OutputObject
  >;

  filters: {
    "ClaimReward(uint256,uint256)": TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;
    ClaimReward: TypedContractEvent<
      ClaimRewardEvent.InputTuple,
      ClaimRewardEvent.OutputTuple,
      ClaimRewardEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReInvest(bytes)": TypedContractEvent<
      ReInvestEvent.InputTuple,
      ReInvestEvent.OutputTuple,
      ReInvestEvent.OutputObject
    >;
    ReInvest: TypedContractEvent<
      ReInvestEvent.InputTuple,
      ReInvestEvent.OutputTuple,
      ReInvestEvent.OutputObject
    >;

    "Stake(address,uint256,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Unbond(address,uint256,uint256,uint256)": TypedContractEvent<
      UnbondEvent.InputTuple,
      UnbondEvent.OutputTuple,
      UnbondEvent.OutputObject
    >;
    Unbond: TypedContractEvent<
      UnbondEvent.InputTuple,
      UnbondEvent.OutputTuple,
      UnbondEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "UpdateStrategy(address)": TypedContractEvent<
      UpdateStrategyEvent.InputTuple,
      UpdateStrategyEvent.OutputTuple,
      UpdateStrategyEvent.OutputObject
    >;
    UpdateStrategy: TypedContractEvent<
      UpdateStrategyEvent.InputTuple,
      UpdateStrategyEvent.OutputTuple,
      UpdateStrategyEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawDirect(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawDirectEvent.InputTuple,
      WithdrawDirectEvent.OutputTuple,
      WithdrawDirectEvent.OutputObject
    >;
    WithdrawDirect: TypedContractEvent<
      WithdrawDirectEvent.InputTuple,
      WithdrawDirectEvent.OutputTuple,
      WithdrawDirectEvent.OutputObject
    >;
  };
}